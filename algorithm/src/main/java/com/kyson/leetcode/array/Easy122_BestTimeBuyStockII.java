package com.kyson.leetcode.array;

/**
 * 📈 LeetCode 122 - 买卖股票的最佳时机 II
 * <p>
 * 1. 题目分析 📋
 * 题目要求：给定一个数组，表示股票在每一天的价格，你可以多次买入和卖出股票，求最大利润。
 * 核心约束：
 * <p>
 * 同一天不能既买入又卖出
 * 卖出前必须持有股票
 * 可以进行多次交易
 * <p>
 * 举个生活例子：就像你在农贸市场买菜，看到菜价便宜就买，看到菜价高就卖，可以反复操作赚取差价。
 * 2. 思路讲解 💡
 * 思路1：贪心算法（推荐！）
 * 核心洞察：只要明天价格比今天高，今天就买入，明天就卖出！
 * 用生活例子解释：
 * <p>
 * 想象你是个水果商贩
 * 如果你知道苹果明天会涨价，今天就进货，明天就卖出
 * 如果连续几天都在涨价，那就每天都这样操作
 * 最终利润 = 所有上涨段的利润总和
 * <p>
 * 价格: [1, 5, 3, 6, 4]
 * 索引:  0  1  2  3  4
 * <p>
 * 第0天到第1天：1→5，涨了4元，买入卖出，利润+4
 * 第1天到第2天：5→3，跌了2元，不操作
 * 第2天到第3天：3→6，涨了3元，买入卖出，利润+3
 * 第3天到第4天：6→4，跌了2元，不操作
 * <p>
 * 总利润 = 4 + 3 = 7
 */
public class Easy122_BestTimeBuyStockII {

    /**
     * 买卖股票的最佳时机 II - 贪心算法
     * 核心思想：只要后一天比前一天价格高，就在前一天买入，后一天卖出
     */
    public int maxProfit(int[] prices) {
        // 边界检查：如果数组为空或只有一天，无法交易
        if (prices == null || prices.length <= 1) {
            return 0;
        }

        int totalProfit = 0; // 总利润

        // 遍历价格数组，从第二天开始比较
        for (int i = 1; i < prices.length; i++) {
            // 如果今天价格比昨天高，就赚取这个差价
            if (prices[i] > prices[i - 1]) {
                totalProfit += prices[i] - prices[i - 1];
            }
        }

        return totalProfit;
    }

}
