package com.kyson.leetcode.array;

/*
    LeetCode 27题：移除元素 - 详细讲解
    1. 题目分析
    让我先用简单的话重述一下这道题：
    题目要求：给你一个数组和一个值，你需要"原地"删除数组中所有等于这个值的元素，然后返回新数组的长度。
    输入输出关系：

    输入：nums = [3,2,2,3], val = 3
    输出：2（因为删除所有的3后，剩下[2,2]，长度为2）

    关键理解：

    "原地"意思是不能创建新数组，要在原数组上修改
    只需要返回新长度，不需要真的删除元素
    剩余元素的顺序可以改变

    题目类型：这是一道典型的双指针题目，考查数组的原地修改技巧。
    2. 思路讲解
    💡 生活化理解
    想象你在整理书架，要把所有的数学书拿掉：

    方法1：看到数学书就扔掉，其他书往前挪（但这样很慢）
    方法2：用两个手指，一个指着当前检查的书，另一个指着要放好书的位置

    🔄 算法思路演进
    暴力解法（新手容易想到）：
    遇到要删除的元素 → 把后面所有元素往前挪一位 → 数组长度-1
    问题：每次删除都要移动很多元素，效率低
    优化解法（双指针）：
    快指针：遍历整个数组
    慢指针：指向下一个要填入的位置
    规则：快指针遇到不等于val的元素，就放到慢指针位置，慢指针+1
 */
public class Easy027_RemoveElement {

    public int removeElement (int[] nums, int val){
        // 边界处理
        if (nums == null || nums.length == 0) {
            return 0;
        }

        int slow = 0;   // 慢指针：指向下一个要填入的位置

        for (int fast = 0; fast < nums.length; fast++) {

            if (nums[fast] != val) {
                // 将有效元素移动到slow位置
                nums[slow] = nums[fast];
                slow++; // slow指针向前移动
            }
            // 如果等于val，快指针继续向前，慢指针不动
        }
        return slow; // slow就是新数组的长度
    }

}
